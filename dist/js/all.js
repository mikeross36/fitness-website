"use strict";class Navbar{async getNavLinks(){try{const e=await fetch("/data/nav-data/navlinks.json");return await e.json()}catch(e){console.log(e)}}displayNavLinks(e){const a=document.querySelector(".navbar");e.forEach((e=>{a&&a.insertAdjacentHTML("beforeend",`<a href="${e.url}" class="navbar__link">${e.title}</a>`)}))}}!async function(){const e=new Navbar,a=await e.getNavLinks();e.displayNavLinks(a)}();class Offers{async getOffers(){try{const e=await fetch("/data/offers-data/offers-data.json");return await e.json()}catch(e){console.error(e)}}displayOffers=e=>{const a=document.querySelector(".offers__container");e.forEach((e=>{a&&a.insertAdjacentHTML("beforeend",`\n                <article class="offers__box">\n                    <div class="offers__box-image">\n                        <img src="${e.image}" class="offers__box-img" alt="offer pic">\n                    </div>\n                    <div class="offers__box-content">\n                        <img src="${e.icon}" class="box__icon" alt="">\n                        <h3 class="box__title">${e.title}</h3>\n                        <p class="box__description">${e.description}</p>\n                        <a href="#home" class="btn">read more</a>\n                    </div>\n                </article>\n            `)}))}}(async()=>{const e=new Offers,a=await e.getOffers();e.displayOffers(a)})();class Plans{async getPlans(){try{const e=await fetch("/data/pricing-data/pricing-data.json");return await e.json()}catch(e){console.error(e)}}displayPlans=e=>{const a=document.querySelectorAll(".plan__includes");let n="";e.forEach((e=>{n+=`\n            <p class="pricing__info-plan">\n                <img src="${e.icon}" alt="check-icon" class="pricing__info-icon" width="20px" height="20px">\n                ${e.title}\n            </p>`})),a.forEach((e=>{e.insertAdjacentHTML("beforeend",n)}))}}(async()=>{const e=new Plans,a=await e.getPlans();e.displayPlans(a)})();class Testimonials{getSlides=async()=>{try{const e=await fetch("/data/slider-data/slider-data.json");return await e.json()}catch(e){console.error(e)}};displaySlides=e=>{[...document.querySelectorAll(".slide")].forEach(((a,n)=>{e.forEach(((e,t)=>{n===t&&(a.innerHTML=`\n                    <p class="slide__description">${e.description}</p>\n                    <div class="user">\n                        <img src="${e.image}" alt="user pic" class="user__img">\n                        <div class="user__info">\n                            <h3 class="user__name">${e.name}</h3>\n                            <span>${e.title}</span>\n                        </div>\n                        <img src="${e.quoteIcon}" alt="quote icon" class="quote__icon" width="20px" height="20px">\n                    </div>`)}))}))}}(async()=>{const e=new Testimonials,a=await e.getSlides();e.displaySlides(a)})();class Trainers{getTrainers=async()=>{try{const e=await fetch("/data/trainers-data/trainers-data.json");return await e.json()}catch(e){console.error(e)}};displayTrainers=e=>{const a=document.querySelector(".trainers__container");e&&e.forEach((e=>{a.insertAdjacentHTML("beforeend",`\n                    <article class="trainers__info">\n                        <img src="${e.image}" alt="trainer1" class="trainers__img">\n                        <div class="trainers__info-content">\n                            <span>${e.title}</span>\n                            <h3 class="trainers__name">${e.name}</h3>\n                            <div class="trainers__socials">\n                                <a href="${e.faceUrl}">\n                                    <img src="${e.faceIcon}" alt="" width="20px" height="20px">\n                                </a>\n                                <a href="${e.twitterUrl}">\n                                    <img src="${e.twitterIcon}" alt="" width="20px" height="20px">\n                                </a>\n                                <a href="${e.pinteresUrl}">\n                                    <img src="${e.pinteresIcon}" alt="" width="20px" height="20px">\n                                </a>\n                                <a href="${e.instagramUrl}">\n                                    <img src="${e.instagramIcon}" alt="" width="20px" height="20px">\n                                </a>\n                            </div>\n                        </div>\n                    </article>\n                `)}))}}function navbarCtrl(){const e=document.getElementById("menu-btn"),a=document.querySelector(".navbar"),n=document.querySelector(".burger__btn");e.onclick=()=>{n.classList.toggle("active"),a.classList.toggle("active")},window.onscroll=()=>{a.classList.remove("active")}}function homeSlider(){const e=[...document.querySelectorAll(".home__slide")],a=[...document.querySelectorAll(".slider__nav-link")];let n=0;a.forEach(((t,s)=>{t.addEventListener("click",(()=>{var t;n!==s&&((t=s)>=e.length?t=0:t<0&&(t=e.length-1),e[n].classList.toggle("active-slide"),a[n].classList.toggle("active-link"),e[t].classList.toggle("active-slide"),a[t].classList.toggle("active-link"),n=t)}))}))}function testimonialSlider(){const e=[...document.querySelectorAll(".slide")],a=document.querySelector(".prev__btn"),n=document.querySelector(".next__btn");let t=0;a.addEventListener("click",(()=>{e[t].classList.remove("active-slide"),t=(t-1+e.length)%e.length,e[t].classList.add("active-slide")})),n.addEventListener("click",(()=>{e[t].classList.remove("active-slide"),t=(t+1)%e.length,e[t].classList.add("active-slide")}))}(async()=>{const e=new Trainers,a=await e.getTrainers();e.displayTrainers(a)})(),testimonialSlider(),homeSlider(),navbarCtrl();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
