"use strict";class Navbar{async getNavLinks(){try{const e=await fetch("/data/nav-data/navlinks.json");return await e.json()}catch(e){console.log(e)}}displayNavLinks(e){const t=document.querySelector(".navbar");e.forEach((e=>{t&&t.insertAdjacentHTML("beforeend",`<a href="${e.url}" class="navbar__link">${e.title}</a>`)}))}}!async function(){const e=new Navbar,t=await e.getNavLinks();e.displayNavLinks(t)}();class Offers{async getOffers(){try{const e=await fetch("/data/offers-data/offers-data.json");return await e.json()}catch(e){console.error(e)}}displayOffers=e=>{const t=document.querySelector(".offers__container");e.forEach((e=>{t&&t.insertAdjacentHTML("beforeend",`\n                <article class="offers__box">\n                    <div class="offers__box-image">\n                        <img src="${e.image}" class="offers__box-img" alt="offer pic">\n                    </div>\n                    <div class="offers__box-content">\n                        <img src="${e.icon}" class="box__icon" alt="">\n                        <h3 class="box__title">${e.title}</h3>\n                        <p class="box__description">${e.description}</p>\n                        <a href="#home" class="btn">read more</a>\n                    </div>\n                </article>\n            `)}))}}(async()=>{const e=new Offers,t=await e.getOffers();e.displayOffers(t)})();class Plans{async getPlans(){try{const e=await fetch("/data/pricing-data/pricing-data.json");return await e.json()}catch(e){console.error(e)}}displayPlans=e=>{const t=document.querySelectorAll(".plan__includes");let n="";e.forEach((e=>{n+=`\n            <p class="pricing__info-plan">\n                <img src="${e.icon}" alt="check-icon" class="pricing__info-icon" width="20px" height="20px">\n                ${e.title}\n            </p>`})),t.forEach((e=>{e.insertAdjacentHTML("beforeend",n)}))}}(async()=>{const e=new Plans,t=await e.getPlans();e.displayPlans(t)})();class Trainers{getTrainers=async()=>{try{const e=await fetch("/data/trainers-data/trainers-data.json");return await e.json()}catch(e){console.error(e)}};displayTrainers=e=>{const t=document.querySelector(".trainers__container");e&&e.forEach((e=>{t.insertAdjacentHTML("beforeend",`\n                    <article class="trainers__info">\n                        <img src="${e.image}" alt="trainer1" class="trainers__img">\n                        <div class="trainers__info-content">\n                            <span>${e.title}</span>\n                            <h3 class="trainers__name">${e.name}</h3>\n                            <div class="trainers__socials">\n                                <a href="${e.faceUrl}">\n                                    <img src="${e.faceIcon}" alt="" width="20px" height="20px">\n                                </a>\n                                <a href="${e.twitterUrl}">\n                                    <img src="${e.twitterIcon}" alt="" width="20px" height="20px">\n                                </a>\n                                <a href="${e.pinteresUrl}">\n                                    <img src="${e.pinteresIcon}" alt="" width="20px" height="20px">\n                                </a>\n                                <a href="${e.instagramUrl}">\n                                    <img src="${e.instagramIcon}" alt="" width="20px" height="20px">\n                                </a>\n                            </div>\n                        </div>\n                    </article>\n                `)}))}}function navbarCtrl(){const e=document.getElementById("menu-btn"),t=document.querySelector(".navbar"),n=document.querySelector(".burger__btn");e.onclick=()=>{n.classList.toggle("active"),t.classList.toggle("active")},window.onscroll=()=>{t.classList.remove("active")}}function homeSlider(){const e=[...document.querySelectorAll(".home__slide")],t=[...document.querySelectorAll(".slider__nav-link")];let n=0;t.forEach(((a,s)=>{a.addEventListener("click",(()=>{var a;n!==s&&((a=s)>=e.length?a=0:a<0&&(a=e.length-1),e[n].classList.toggle("active-slide"),t[n].classList.toggle("active-link"),e[a].classList.toggle("active-slide"),t[a].classList.toggle("active-link"),n=a)}))}))}function testimonialSlider(){const e=[...document.querySelectorAll(".slide")],t=document.querySelector(".prev__btn"),n=document.querySelector(".next__btn");let a=0;t.addEventListener("click",(()=>{e[a].classList.remove("active-slide"),a=(a-1+e.length)%e.length,e[a].classList.add("active-slide")})),n.addEventListener("click",(()=>{e[a].classList.remove("active-slide"),a=(a+1)%e.length,e[a].classList.add("active-slide")}))}(async()=>{const e=new Trainers,t=await e.getTrainers();e.displayTrainers(t)})(),testimonialSlider(),homeSlider(),navbarCtrl();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
